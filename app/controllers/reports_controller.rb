=begin
METRICS API

The SASHIMI API represents a RESTful implementation of SUSHI automation intended to returns COUNTER Research Data Release 1 reports

OpenAPI spec version: 1.0.0
Contact: support@datacite.org
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end
class ReportsController < ApplicationController
  prepend_before_action :authenticate_user_from_token!
  before_action :set_report, only: [:show, :update, :destroy]
  before_action :set_user_hash, only: [:create, :update, :destroy]
  authorize_resource :except => [:index, :show]

  def index
    collection = Report.all
    @meta = { total: collection.size }
    render json: collection, meta: @meta
  end

  def destroy
    if @report.destroy
      head :no_content
    else
      Rails.logger.warn @report.errors.inspect
      render jsonapi: serialize(@report.errors), status: :unprocessable_entity
    end
  end

  def show
    render json: @report
  end

  def update
    if @report.update_attributes(safe_params.merge(@user_hash))
      render json: @report
    else
      Rails.logger.warn @report.errors.inspect
      render json: serialize(@report.errors), status: :unprocessable_entity
    end
  end

  def create
    @report = Report.new(safe_params.merge(@user_hash))
    authorize! :create, @report

    if @report.save
      render json: @report, status: :created
    else
      Rails.logger.warn @report.errors.inspect
      render json: @report.errors, status: :unprocessable_entity
    end
  end

  protected

  def set_report
    # id = Base32::URL.decode(URI.decode(params[:id]))
    id = params[:id]
    fail ActiveRecord::RecordNotFound unless id.present?

    @report = Report.where(uid: id).first

    fail ActiveRecord::RecordNotFound unless @report.present?
  end

  def set_user_hash
    @user_hash = { client_id: current_user.client_id, provider_id: current_user.provider_id }
  end


  private

  def permit_recursive_params(params)
    puts params.inspect
    (params.try(:to_unsafe_h) || params).map do |key, value|
      if value.is_a?(Array)

        if value.first.respond_to?(:map)
          { key => [ permit_recursive_params(value.first) ] }
        else
          { key => [] }
        end
      elsif value.is_a?(Hash)
        { key => permit_recursive_params(value) }
      else
        key
      end
    end
  end

  def safe_params

    fail JSON::ParserError, "You need to provide a payload following the SUSHI specification" unless params[:report_datasets].present? and params[:report_header].present?

    header, datasets = params.require([:report_header, :report_datasets])
    header.merge!({report_datasets: datasets})
    header.permit(
      :report_name, :report_id, :release, :created, :created_by, 
      report_attributes: [:name, :value], 
      report_filters: [:name, :value], 
      exceptions: [:message, :severity, :data, :code, :help_url], 
      report_datasets: [
        :dataset_title, 
        :yop,
        :uri,
        :platform,
        :data_type, 
        :publisher,
        :access_method,
        publisher_id:[:type, :value], 
        dataset_dates:[:type, :value], 
        performance: [
          period: [:end_date, :begin_date],
          instance: [:count, :volume, :country, :metric_type, :access_method]
        ],
        dataset_contributors: [:type, :value],
        dataset_attributes: [:type, :value],
        dataset_id:[:type, :value]
      ]
    )

  end
end
