=begin
METRICS API

The SASHIMI API represents a RESTful implementation of SUSHI automation intended to returns COUNTER Research Data Release 1 reports

OpenAPI spec version: 1.0.0
Contact: support@datacite.org
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end
class ReportsController < ApplicationController

  # include validation methods for sushi
  include Helpeable


  prepend_before_action :authenticate_user_from_token!
  before_action :set_report, only: [:show, :destroy]
  before_action :set_user_hash, only: [:create, :update, :destroy]
  authorize_resource :except => [:index, :show]



  def index

    page = (params.dig(:page, :number) || 1).to_i
    size = (params.dig(:page, :size) || 5).to_i
    from = (page - 1) * size

    sort = case params[:sort]
           when "-name" then { "name.keyword" => { order: 'desc' }}
           when "created" then { created: { order: 'asc' }}
           when "-created" then { created: { order: 'desc' }}
           else { "name.keyword" => { order: 'asc' }}
           end

    if params[:id].present?
      collection = Report.where(uid: params[:id])
    elsif params[:created_by].present?
      collection = Report.where(created_by: params[:created_by])
    elsif params[:year].present?
      collection = Report.where(year: params[:year])
    elsif params[:client_id].present?
      collection = Report.where(client_id: params[:client_id])
    else
      collection = Report.all
    end

    total = collection.size
    total_pages = (total.to_f / size).ceil

    @reports = Kaminari.paginate_array(collection, total_count: total).page(page).per(size)

    @meta = {
      total: total,
      "total-pages": total_pages,
      page: page
      # years: years
    }
    render json: @reports, meta: @meta, include: @include, each_serializer: HeaderSerializer
  end

  def destroy
    if @report.destroy
      head :no_content
    else
      Rails.logger.warn @report.errors.inspect
      render jsonapi: serialize(@report.errors), status: :unprocessable_entity
    end
  end

  def show
    render json: @report
  end

  def update
    fail ActiveRecord::RecordInvalid unless validate_uuid(params[:id]) == true
    @report = Report.where(uid: params[:id]).first
    exists = @report.present?

    # create report if it doesn't exist already
    @report = Report.new(safe_params.merge({uid: params[:id]})) unless @report.present?

    authorize! :update, @report
    if @report.update_attributes(safe_params.merge(@user_hash))
      render json: @report, status: exists ? :ok : :created
    else
      Rails.logger.warn @report.errors.inspect
      render json: serialize(@report.errors), status: :unprocessable_entity
    end
  end

  def create
    @report = Report.new(safe_params.merge(@user_hash))
    authorize! :create, @report

    if @report.save
      render json: @report, status: :created
    else
      Rails.logger.warn @report.errors.inspect
      render json: @report.errors, status: :unprocessable_entity
    end
  end

  protected

  def set_report
   
    @report = Report.where(uid: params[:id]).first

    fail ActiveRecord::RecordNotFound unless @report.present?
  end

  def set_user_hash
    @user_hash = { client_id: current_user.client_id, provider_id: current_user.provider_id }
  end


  private


  def safe_params

    fail JSON::ParserError, "You need to provide a payload following the SUSHI specification" unless params[:report_datasets].present? and params[:report_header].present? 

    header, datasets = params.require([:report_header, :report_datasets])
    header.merge!({report_datasets: datasets}) 
    nested_names = [:name, :value]
    nested_types = [:type, :value]
    codes =  IsoCountryCodes.for_select.map {|code| code.last.downcase}
    header.permit(
      :report_name, :report_id, :release, :created, :created_by, 
      report_attributes: nested_names, 
      report_filters: nested_names, 
      reporting_period: [:end_date, :begin_date], 
      exceptions: [:message, :severity, :data, :code, :help_url], 
      report_datasets: [
        :dataset_title, 
        :yop,
        :uri,
        :platform,
        :data_type, 
        :publisher,
        :access_method,
        publisher_id: nested_types, 
        dataset_dates:nested_types, 
        performance: [
          period: [:end_date, :begin_date],
          instance: [:access_method, :metric_type, :count, country_counts: codes]
        ],
        dataset_contributors: nested_types,
        dataset_attributes: nested_types,
        dataset_id: nested_types
      ]
    )

  end
end
